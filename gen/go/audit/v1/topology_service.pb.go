// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: audit/v1/topology_service.proto

package auditv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeStatus int32

const (
	NodeStatus_NODE_STATUS_UNSPECIFIED NodeStatus = 0
	NodeStatus_NODE_STATUS_LIVE        NodeStatus = 1 // Service is running and healthy
	NodeStatus_NODE_STATUS_DEGRADED    NodeStatus = 2 // Service is running but experiencing issues
	NodeStatus_NODE_STATUS_DEAD        NodeStatus = 3 // Service is down or unreachable
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NODE_STATUS_UNSPECIFIED",
		1: "NODE_STATUS_LIVE",
		2: "NODE_STATUS_DEGRADED",
		3: "NODE_STATUS_DEAD",
	}
	NodeStatus_value = map[string]int32{
		"NODE_STATUS_UNSPECIFIED": 0,
		"NODE_STATUS_LIVE":        1,
		"NODE_STATUS_DEGRADED":    2,
		"NODE_STATUS_DEAD":        3,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_topology_service_proto_enumTypes[0].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_audit_v1_topology_service_proto_enumTypes[0]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{0}
}

type EdgeStatus int32

const (
	EdgeStatus_EDGE_STATUS_UNSPECIFIED EdgeStatus = 0
	EdgeStatus_EDGE_STATUS_ACTIVE      EdgeStatus = 1 // Connection is healthy
	EdgeStatus_EDGE_STATUS_DEGRADED    EdgeStatus = 2 // Connection has high latency or errors
	EdgeStatus_EDGE_STATUS_FAILED      EdgeStatus = 3 // Connection is broken
)

// Enum value maps for EdgeStatus.
var (
	EdgeStatus_name = map[int32]string{
		0: "EDGE_STATUS_UNSPECIFIED",
		1: "EDGE_STATUS_ACTIVE",
		2: "EDGE_STATUS_DEGRADED",
		3: "EDGE_STATUS_FAILED",
	}
	EdgeStatus_value = map[string]int32{
		"EDGE_STATUS_UNSPECIFIED": 0,
		"EDGE_STATUS_ACTIVE":      1,
		"EDGE_STATUS_DEGRADED":    2,
		"EDGE_STATUS_FAILED":      3,
	}
)

func (x EdgeStatus) Enum() *EdgeStatus {
	p := new(EdgeStatus)
	*p = x
	return p
}

func (x EdgeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_topology_service_proto_enumTypes[1].Descriptor()
}

func (EdgeStatus) Type() protoreflect.EnumType {
	return &file_audit_v1_topology_service_proto_enumTypes[1]
}

func (x EdgeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeStatus.Descriptor instead.
func (EdgeStatus) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{1}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNSPECIFIED ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_GRPC        ConnectionType = 1 // gRPC service call
	ConnectionType_CONNECTION_TYPE_HTTP        ConnectionType = 2 // HTTP/REST API call
	ConnectionType_CONNECTION_TYPE_DATA_FLOW   ConnectionType = 3 // Logical data flow (not direct API call)
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_GRPC",
		2: "CONNECTION_TYPE_HTTP",
		3: "CONNECTION_TYPE_DATA_FLOW",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_GRPC":        1,
		"CONNECTION_TYPE_HTTP":        2,
		"CONNECTION_TYPE_DATA_FLOW":   3,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_topology_service_proto_enumTypes[2].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_audit_v1_topology_service_proto_enumTypes[2]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{2}
}

// Metadata sections available for nodes
type MetadataSection int32

const (
	MetadataSection_METADATA_SECTION_UNSPECIFIED    MetadataSection = 0 // Returns all sections
	MetadataSection_METADATA_SECTION_BASIC_INFO     MetadataSection = 1
	MetadataSection_METADATA_SECTION_HEALTH_METRICS MetadataSection = 2
	MetadataSection_METADATA_SECTION_ENDPOINTS      MetadataSection = 3
	MetadataSection_METADATA_SECTION_CONFIGURATION  MetadataSection = 4
)

// Enum value maps for MetadataSection.
var (
	MetadataSection_name = map[int32]string{
		0: "METADATA_SECTION_UNSPECIFIED",
		1: "METADATA_SECTION_BASIC_INFO",
		2: "METADATA_SECTION_HEALTH_METRICS",
		3: "METADATA_SECTION_ENDPOINTS",
		4: "METADATA_SECTION_CONFIGURATION",
	}
	MetadataSection_value = map[string]int32{
		"METADATA_SECTION_UNSPECIFIED":    0,
		"METADATA_SECTION_BASIC_INFO":     1,
		"METADATA_SECTION_HEALTH_METRICS": 2,
		"METADATA_SECTION_ENDPOINTS":      3,
		"METADATA_SECTION_CONFIGURATION":  4,
	}
)

func (x MetadataSection) Enum() *MetadataSection {
	p := new(MetadataSection)
	*p = x
	return p
}

func (x MetadataSection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataSection) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_topology_service_proto_enumTypes[3].Descriptor()
}

func (MetadataSection) Type() protoreflect.EnumType {
	return &file_audit_v1_topology_service_proto_enumTypes[3]
}

func (x MetadataSection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataSection.Descriptor instead.
func (MetadataSection) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{3}
}

type GetTopologyStructureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional filter by service types (e.g., ["exchange-simulator", "custodian-simulator"])
	ServiceTypes []string `protobuf:"bytes,1,rep,name=service_types,json=serviceTypes,proto3" json:"service_types,omitempty"`
	// Optional filter by node status
	Statuses []NodeStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=audit.v1.NodeStatus" json:"statuses,omitempty"`
	// System fields (100+)
	// Optional request correlation ID for distributed tracing
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTopologyStructureRequest) Reset() {
	*x = GetTopologyStructureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyStructureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyStructureRequest) ProtoMessage() {}

func (x *GetTopologyStructureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyStructureRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyStructureRequest) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTopologyStructureRequest) GetServiceTypes() []string {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

func (x *GetTopologyStructureRequest) GetStatuses() []NodeStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GetTopologyStructureRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TopologyStructureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of service nodes
	Nodes []*NodeSummary `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// List of directed edges between nodes
	Edges []*EdgeSummary `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// Timestamp of this topology snapshot
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// Unique snapshot identifier for incremental updates
	SnapshotId string `protobuf:"bytes,4,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// System fields (100+)
	// Request correlation ID (echoed from request)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *TopologyStructureResponse) Reset() {
	*x = TopologyStructureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyStructureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyStructureResponse) ProtoMessage() {}

func (x *TopologyStructureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyStructureResponse.ProtoReflect.Descriptor instead.
func (*TopologyStructureResponse) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{1}
}

func (x *TopologyStructureResponse) GetNodes() []*NodeSummary {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *TopologyStructureResponse) GetEdges() []*EdgeSummary {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *TopologyStructureResponse) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *TopologyStructureResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *TopologyStructureResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type NodeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique node identifier (e.g., "exchange-okx")
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Display name (e.g., "Exchange OKX")
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Service type (e.g., "exchange-simulator", "risk-monitor")
	ServiceType string `protobuf:"bytes,3,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Instance name (e.g., "exchange-okx", "risk-monitor-lh")
	InstanceName string `protobuf:"bytes,4,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// Current node status
	Status NodeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=audit.v1.NodeStatus" json:"status,omitempty"`
	// Labels for grouping/filtering (e.g., {"provider": "okx", "region": "us"})
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeSummary) Reset() {
	*x = NodeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummary) ProtoMessage() {}

func (x *NodeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummary.ProtoReflect.Descriptor instead.
func (*NodeSummary) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{2}
}

func (x *NodeSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeSummary) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *NodeSummary) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *NodeSummary) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *NodeSummary) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EdgeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique edge identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source node ID (directional: from)
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Target node ID (directional: to)
	TargetId string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Connection type
	Type ConnectionType `protobuf:"varint,4,opt,name=type,proto3,enum=audit.v1.ConnectionType" json:"type,omitempty"`
	// Current edge status
	Status EdgeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=audit.v1.EdgeStatus" json:"status,omitempty"`
	// Whether this is a critical connection (visual hint: thicker line)
	IsCritical bool `protobuf:"varint,6,opt,name=is_critical,json=isCritical,proto3" json:"is_critical,omitempty"`
}

func (x *EdgeSummary) Reset() {
	*x = EdgeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSummary) ProtoMessage() {}

func (x *EdgeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSummary.ProtoReflect.Descriptor instead.
func (*EdgeSummary) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EdgeSummary) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *EdgeSummary) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *EdgeSummary) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *EdgeSummary) GetStatus() EdgeStatus {
	if x != nil {
		return x.Status
	}
	return EdgeStatus_EDGE_STATUS_UNSPECIFIED
}

func (x *EdgeSummary) GetIsCritical() bool {
	if x != nil {
		return x.IsCritical
	}
	return false
}

type GetNodeMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node IDs to fetch metadata for. Empty = all nodes.
	NodeIds []string `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// Configurable metadata sections to fetch
	// If empty, returns all available metadata
	MetadataSections []MetadataSection `protobuf:"varint,2,rep,packed,name=metadata_sections,json=metadataSections,proto3,enum=audit.v1.MetadataSection" json:"metadata_sections,omitempty"`
	// System fields (100+)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetNodeMetadataRequest) Reset() {
	*x = GetNodeMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeMetadataRequest) ProtoMessage() {}

func (x *GetNodeMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetNodeMetadataRequest) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodeMetadataRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *GetNodeMetadataRequest) GetMetadataSections() []MetadataSection {
	if x != nil {
		return x.MetadataSections
	}
	return nil
}

func (x *GetNodeMetadataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetNodeMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of node_id to metadata
	Metadata map[string]*NodeMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// System fields (100+)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetNodeMetadataResponse) Reset() {
	*x = GetNodeMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeMetadataResponse) ProtoMessage() {}

func (x *GetNodeMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetNodeMetadataResponse) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodeMetadataResponse) GetMetadata() map[string]*NodeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetNodeMetadataResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type NodeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic service information
	BasicInfo *BasicInfo `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	// Health metrics (CPU, memory, requests, errors)
	HealthMetrics *HealthMetrics `protobuf:"bytes,2,opt,name=health_metrics,json=healthMetrics,proto3" json:"health_metrics,omitempty"`
	// Service endpoints
	Endpoints *EndpointInfo `protobuf:"bytes,3,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Service configuration
	Configuration map[string]string `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeMetadata) Reset() {
	*x = NodeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetadata) ProtoMessage() {}

func (x *NodeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetadata.ProtoReflect.Descriptor instead.
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{6}
}

func (x *NodeMetadata) GetBasicInfo() *BasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *NodeMetadata) GetHealthMetrics() *HealthMetrics {
	if x != nil {
		return x.HealthMetrics
	}
	return nil
}

func (x *NodeMetadata) GetEndpoints() *EndpointInfo {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *NodeMetadata) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type BasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Service start time
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Last health check time
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	// Deployment environment (e.g., "docker", "k8s")
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *BasicInfo) Reset() {
	*x = BasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInfo) ProtoMessage() {}

func (x *BasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInfo.ProtoReflect.Descriptor instead.
func (*BasicInfo) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{7}
}

func (x *BasicInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BasicInfo) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *BasicInfo) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *BasicInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type HealthMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU usage percentage (0-100)
	CpuPercent float64 `protobuf:"fixed64,1,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	// Memory usage in megabytes
	MemoryMb float64 `protobuf:"fixed64,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	// Total requests since start
	TotalRequests int64 `protobuf:"varint,3,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	// Total errors since start
	TotalErrors int64 `protobuf:"varint,4,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
	// Current error rate (0.0-1.0)
	ErrorRate float64 `protobuf:"fixed64,5,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// Timestamp when metrics were measured
	MeasuredAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=measured_at,json=measuredAt,proto3" json:"measured_at,omitempty"`
}

func (x *HealthMetrics) Reset() {
	*x = HealthMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMetrics) ProtoMessage() {}

func (x *HealthMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMetrics.ProtoReflect.Descriptor instead.
func (*HealthMetrics) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{8}
}

func (x *HealthMetrics) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *HealthMetrics) GetMemoryMb() float64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *HealthMetrics) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *HealthMetrics) GetTotalErrors() int64 {
	if x != nil {
		return x.TotalErrors
	}
	return 0
}

func (x *HealthMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *HealthMetrics) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

type EndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gRPC endpoints (e.g., ["localhost:50051"])
	GrpcEndpoints []string `protobuf:"bytes,1,rep,name=grpc_endpoints,json=grpcEndpoints,proto3" json:"grpc_endpoints,omitempty"`
	// HTTP/REST endpoints (e.g., ["http://localhost:8080"])
	HttpEndpoints []string `protobuf:"bytes,2,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	// Prometheus metrics endpoints (e.g., ["http://localhost:9090/metrics"])
	MetricsEndpoints []string `protobuf:"bytes,3,rep,name=metrics_endpoints,json=metricsEndpoints,proto3" json:"metrics_endpoints,omitempty"`
}

func (x *EndpointInfo) Reset() {
	*x = EndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointInfo) ProtoMessage() {}

func (x *EndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointInfo.ProtoReflect.Descriptor instead.
func (*EndpointInfo) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointInfo) GetGrpcEndpoints() []string {
	if x != nil {
		return x.GrpcEndpoints
	}
	return nil
}

func (x *EndpointInfo) GetHttpEndpoints() []string {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

func (x *EndpointInfo) GetMetricsEndpoints() []string {
	if x != nil {
		return x.MetricsEndpoints
	}
	return nil
}

type GetEdgeMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Edge IDs to fetch metadata for
	EdgeIds []string `protobuf:"bytes,1,rep,name=edge_ids,json=edgeIds,proto3" json:"edge_ids,omitempty"`
	// Configurable metadata sections to fetch
	MetadataSections []MetadataSection `protobuf:"varint,2,rep,packed,name=metadata_sections,json=metadataSections,proto3,enum=audit.v1.MetadataSection" json:"metadata_sections,omitempty"`
	// System fields (100+)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetEdgeMetadataRequest) Reset() {
	*x = GetEdgeMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgeMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgeMetadataRequest) ProtoMessage() {}

func (x *GetEdgeMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgeMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetEdgeMetadataRequest) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetEdgeMetadataRequest) GetEdgeIds() []string {
	if x != nil {
		return x.EdgeIds
	}
	return nil
}

func (x *GetEdgeMetadataRequest) GetMetadataSections() []MetadataSection {
	if x != nil {
		return x.MetadataSections
	}
	return nil
}

func (x *GetEdgeMetadataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetEdgeMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of edge_id to metadata
	Metadata map[string]*EdgeMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// System fields (100+)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetEdgeMetadataResponse) Reset() {
	*x = GetEdgeMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgeMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgeMetadataResponse) ProtoMessage() {}

func (x *GetEdgeMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgeMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetEdgeMetadataResponse) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetEdgeMetadataResponse) GetMetadata() map[string]*EdgeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetEdgeMetadataResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type EdgeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection metrics (latency, throughput, errors)
	Metrics *ConnectionMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Connection details (protocol, methods, established time)
	Details *ConnectionDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *EdgeMetadata) Reset() {
	*x = EdgeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetadata) ProtoMessage() {}

func (x *EdgeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetadata.ProtoReflect.Descriptor instead.
func (*EdgeMetadata) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{12}
}

func (x *EdgeMetadata) GetMetrics() *ConnectionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *EdgeMetadata) GetDetails() *ConnectionDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ConnectionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Median latency in milliseconds
	LatencyP50Ms float64 `protobuf:"fixed64,1,opt,name=latency_p50_ms,json=latencyP50Ms,proto3" json:"latency_p50_ms,omitempty"`
	// 99th percentile latency in milliseconds
	LatencyP99Ms float64 `protobuf:"fixed64,2,opt,name=latency_p99_ms,json=latencyP99Ms,proto3" json:"latency_p99_ms,omitempty"`
	// Throughput in requests per second
	ThroughputRps int64 `protobuf:"varint,3,opt,name=throughput_rps,json=throughputRps,proto3" json:"throughput_rps,omitempty"`
	// Error rate (0.0-1.0)
	ErrorRate float64 `protobuf:"fixed64,4,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// Total bytes sent over this connection
	TotalBytesSent int64 `protobuf:"varint,5,opt,name=total_bytes_sent,json=totalBytesSent,proto3" json:"total_bytes_sent,omitempty"`
	// Timestamp when metrics were measured
	MeasuredAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=measured_at,json=measuredAt,proto3" json:"measured_at,omitempty"`
}

func (x *ConnectionMetrics) Reset() {
	*x = ConnectionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionMetrics) ProtoMessage() {}

func (x *ConnectionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionMetrics.ProtoReflect.Descriptor instead.
func (*ConnectionMetrics) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionMetrics) GetLatencyP50Ms() float64 {
	if x != nil {
		return x.LatencyP50Ms
	}
	return 0
}

func (x *ConnectionMetrics) GetLatencyP99Ms() float64 {
	if x != nil {
		return x.LatencyP99Ms
	}
	return 0
}

func (x *ConnectionMetrics) GetThroughputRps() int64 {
	if x != nil {
		return x.ThroughputRps
	}
	return 0
}

func (x *ConnectionMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *ConnectionMetrics) GetTotalBytesSent() int64 {
	if x != nil {
		return x.TotalBytesSent
	}
	return 0
}

func (x *ConnectionMetrics) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

type ConnectionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol (e.g., "gRPC", "HTTP/1.1", "HTTP/2")
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Methods/endpoints called over this connection
	Methods []string `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	// Time when connection was established
	EstablishedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=established_at,json=establishedAt,proto3" json:"established_at,omitempty"`
}

func (x *ConnectionDetails) Reset() {
	*x = ConnectionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionDetails) ProtoMessage() {}

func (x *ConnectionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionDetails.ProtoReflect.Descriptor instead.
func (*ConnectionDetails) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionDetails) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ConnectionDetails) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *ConnectionDetails) GetEstablishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EstablishedAt
	}
	return nil
}

type StreamTopologyChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Snapshot ID to resume from (missed changes are NOT replayed)
	FromSnapshotId string `protobuf:"bytes,1,opt,name=from_snapshot_id,json=fromSnapshotId,proto3" json:"from_snapshot_id,omitempty"`
	// Optional filter by service types
	ServiceTypes []string `protobuf:"bytes,2,rep,name=service_types,json=serviceTypes,proto3" json:"service_types,omitempty"`
}

func (x *StreamTopologyChangesRequest) Reset() {
	*x = StreamTopologyChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTopologyChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTopologyChangesRequest) ProtoMessage() {}

func (x *StreamTopologyChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTopologyChangesRequest.ProtoReflect.Descriptor instead.
func (*StreamTopologyChangesRequest) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{15}
}

func (x *StreamTopologyChangesRequest) GetFromSnapshotId() string {
	if x != nil {
		return x.FromSnapshotId
	}
	return ""
}

func (x *StreamTopologyChangesRequest) GetServiceTypes() []string {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

type TopologyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of this change
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Updated snapshot ID after this change
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// The specific change (oneof ensures exactly one)
	//
	// Types that are assignable to Change:
	//
	//	*TopologyChange_NodeAdded
	//	*TopologyChange_NodeRemoved
	//	*TopologyChange_NodeStatusChanged
	//	*TopologyChange_EdgeAdded
	//	*TopologyChange_EdgeRemoved
	//	*TopologyChange_EdgeStatusChanged
	Change isTopologyChange_Change `protobuf_oneof:"change"`
}

func (x *TopologyChange) Reset() {
	*x = TopologyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyChange) ProtoMessage() {}

func (x *TopologyChange) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyChange.ProtoReflect.Descriptor instead.
func (*TopologyChange) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{16}
}

func (x *TopologyChange) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TopologyChange) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (m *TopologyChange) GetChange() isTopologyChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *TopologyChange) GetNodeAdded() *NodeAdded {
	if x, ok := x.GetChange().(*TopologyChange_NodeAdded); ok {
		return x.NodeAdded
	}
	return nil
}

func (x *TopologyChange) GetNodeRemoved() *NodeRemoved {
	if x, ok := x.GetChange().(*TopologyChange_NodeRemoved); ok {
		return x.NodeRemoved
	}
	return nil
}

func (x *TopologyChange) GetNodeStatusChanged() *NodeStatusChanged {
	if x, ok := x.GetChange().(*TopologyChange_NodeStatusChanged); ok {
		return x.NodeStatusChanged
	}
	return nil
}

func (x *TopologyChange) GetEdgeAdded() *EdgeAdded {
	if x, ok := x.GetChange().(*TopologyChange_EdgeAdded); ok {
		return x.EdgeAdded
	}
	return nil
}

func (x *TopologyChange) GetEdgeRemoved() *EdgeRemoved {
	if x, ok := x.GetChange().(*TopologyChange_EdgeRemoved); ok {
		return x.EdgeRemoved
	}
	return nil
}

func (x *TopologyChange) GetEdgeStatusChanged() *EdgeStatusChanged {
	if x, ok := x.GetChange().(*TopologyChange_EdgeStatusChanged); ok {
		return x.EdgeStatusChanged
	}
	return nil
}

type isTopologyChange_Change interface {
	isTopologyChange_Change()
}

type TopologyChange_NodeAdded struct {
	NodeAdded *NodeAdded `protobuf:"bytes,3,opt,name=node_added,json=nodeAdded,proto3,oneof"`
}

type TopologyChange_NodeRemoved struct {
	NodeRemoved *NodeRemoved `protobuf:"bytes,4,opt,name=node_removed,json=nodeRemoved,proto3,oneof"`
}

type TopologyChange_NodeStatusChanged struct {
	NodeStatusChanged *NodeStatusChanged `protobuf:"bytes,5,opt,name=node_status_changed,json=nodeStatusChanged,proto3,oneof"`
}

type TopologyChange_EdgeAdded struct {
	EdgeAdded *EdgeAdded `protobuf:"bytes,6,opt,name=edge_added,json=edgeAdded,proto3,oneof"`
}

type TopologyChange_EdgeRemoved struct {
	EdgeRemoved *EdgeRemoved `protobuf:"bytes,7,opt,name=edge_removed,json=edgeRemoved,proto3,oneof"`
}

type TopologyChange_EdgeStatusChanged struct {
	EdgeStatusChanged *EdgeStatusChanged `protobuf:"bytes,8,opt,name=edge_status_changed,json=edgeStatusChanged,proto3,oneof"`
}

func (*TopologyChange_NodeAdded) isTopologyChange_Change() {}

func (*TopologyChange_NodeRemoved) isTopologyChange_Change() {}

func (*TopologyChange_NodeStatusChanged) isTopologyChange_Change() {}

func (*TopologyChange_EdgeAdded) isTopologyChange_Change() {}

func (*TopologyChange_EdgeRemoved) isTopologyChange_Change() {}

func (*TopologyChange_EdgeStatusChanged) isTopologyChange_Change() {}

type NodeAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly added node
	Node *NodeSummary `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *NodeAdded) Reset() {
	*x = NodeAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAdded) ProtoMessage() {}

func (x *NodeAdded) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAdded.ProtoReflect.Descriptor instead.
func (*NodeAdded) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{17}
}

func (x *NodeAdded) GetNode() *NodeSummary {
	if x != nil {
		return x.Node
	}
	return nil
}

type NodeRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the removed node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Reason for removal (e.g., "shutdown", "crashed", "timeout")
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NodeRemoved) Reset() {
	*x = NodeRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRemoved) ProtoMessage() {}

func (x *NodeRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRemoved.ProtoReflect.Descriptor instead.
func (*NodeRemoved) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{18}
}

func (x *NodeRemoved) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeRemoved) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type NodeStatusChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the node with changed status
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Previous status
	OldStatus NodeStatus `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=audit.v1.NodeStatus" json:"old_status,omitempty"`
	// New status
	NewStatus NodeStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=audit.v1.NodeStatus" json:"new_status,omitempty"`
	// Reason for change (e.g., "health_check_failed", "recovered")
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NodeStatusChanged) Reset() {
	*x = NodeStatusChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusChanged) ProtoMessage() {}

func (x *NodeStatusChanged) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusChanged.ProtoReflect.Descriptor instead.
func (*NodeStatusChanged) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{19}
}

func (x *NodeStatusChanged) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeStatusChanged) GetOldStatus() NodeStatus {
	if x != nil {
		return x.OldStatus
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *NodeStatusChanged) GetNewStatus() NodeStatus {
	if x != nil {
		return x.NewStatus
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *NodeStatusChanged) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EdgeAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly added edge
	Edge *EdgeSummary `protobuf:"bytes,1,opt,name=edge,proto3" json:"edge,omitempty"`
}

func (x *EdgeAdded) Reset() {
	*x = EdgeAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeAdded) ProtoMessage() {}

func (x *EdgeAdded) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeAdded.ProtoReflect.Descriptor instead.
func (*EdgeAdded) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{20}
}

func (x *EdgeAdded) GetEdge() *EdgeSummary {
	if x != nil {
		return x.Edge
	}
	return nil
}

type EdgeRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the removed edge
	EdgeId string `protobuf:"bytes,1,opt,name=edge_id,json=edgeId,proto3" json:"edge_id,omitempty"`
	// Reason for removal (e.g., "node_removed", "connection_closed")
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *EdgeRemoved) Reset() {
	*x = EdgeRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeRemoved) ProtoMessage() {}

func (x *EdgeRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeRemoved.ProtoReflect.Descriptor instead.
func (*EdgeRemoved) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{21}
}

func (x *EdgeRemoved) GetEdgeId() string {
	if x != nil {
		return x.EdgeId
	}
	return ""
}

func (x *EdgeRemoved) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EdgeStatusChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the edge with changed status
	EdgeId string `protobuf:"bytes,1,opt,name=edge_id,json=edgeId,proto3" json:"edge_id,omitempty"`
	// Previous status
	OldStatus EdgeStatus `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=audit.v1.EdgeStatus" json:"old_status,omitempty"`
	// New status
	NewStatus EdgeStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=audit.v1.EdgeStatus" json:"new_status,omitempty"`
	// Reason for change (e.g., "high_latency", "timeout", "recovered")
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *EdgeStatusChanged) Reset() {
	*x = EdgeStatusChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeStatusChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeStatusChanged) ProtoMessage() {}

func (x *EdgeStatusChanged) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeStatusChanged.ProtoReflect.Descriptor instead.
func (*EdgeStatusChanged) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{22}
}

func (x *EdgeStatusChanged) GetEdgeId() string {
	if x != nil {
		return x.EdgeId
	}
	return ""
}

func (x *EdgeStatusChanged) GetOldStatus() EdgeStatus {
	if x != nil {
		return x.OldStatus
	}
	return EdgeStatus_EDGE_STATUS_UNSPECIFIED
}

func (x *EdgeStatusChanged) GetNewStatus() EdgeStatus {
	if x != nil {
		return x.NewStatus
	}
	return EdgeStatus_EDGE_STATUS_UNSPECIFIED
}

func (x *EdgeStatusChanged) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type StreamMetricsUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node IDs to subscribe to. Empty = all nodes.
	NodeIds []string `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// Edge IDs to subscribe to. Empty = all edges.
	EdgeIds []string `protobuf:"bytes,2,rep,name=edge_ids,json=edgeIds,proto3" json:"edge_ids,omitempty"`
	// Alternative: filter by service types
	ServiceTypes []string `protobuf:"bytes,3,rep,name=service_types,json=serviceTypes,proto3" json:"service_types,omitempty"`
	// Update interval (minimum 1 second, enforced server-side)
	// Valid range: 1s - 60s
	UpdateInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	// System fields (100+)
	RequestId string `protobuf:"bytes,100,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *StreamMetricsUpdatesRequest) Reset() {
	*x = StreamMetricsUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetricsUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsUpdatesRequest) ProtoMessage() {}

func (x *StreamMetricsUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsUpdatesRequest.ProtoReflect.Descriptor instead.
func (*StreamMetricsUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{23}
}

func (x *StreamMetricsUpdatesRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *StreamMetricsUpdatesRequest) GetEdgeIds() []string {
	if x != nil {
		return x.EdgeIds
	}
	return nil
}

func (x *StreamMetricsUpdatesRequest) GetServiceTypes() []string {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

func (x *StreamMetricsUpdatesRequest) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

func (x *StreamMetricsUpdatesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type MetricsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of this update
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The specific update (oneof ensures exactly one)
	//
	// Types that are assignable to Update:
	//
	//	*MetricsUpdate_NodeMetrics
	//	*MetricsUpdate_EdgeMetrics
	Update isMetricsUpdate_Update `protobuf_oneof:"update"`
}

func (x *MetricsUpdate) Reset() {
	*x = MetricsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsUpdate) ProtoMessage() {}

func (x *MetricsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsUpdate.ProtoReflect.Descriptor instead.
func (*MetricsUpdate) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{24}
}

func (x *MetricsUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *MetricsUpdate) GetUpdate() isMetricsUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *MetricsUpdate) GetNodeMetrics() *NodeMetricsUpdate {
	if x, ok := x.GetUpdate().(*MetricsUpdate_NodeMetrics); ok {
		return x.NodeMetrics
	}
	return nil
}

func (x *MetricsUpdate) GetEdgeMetrics() *EdgeMetricsUpdate {
	if x, ok := x.GetUpdate().(*MetricsUpdate_EdgeMetrics); ok {
		return x.EdgeMetrics
	}
	return nil
}

type isMetricsUpdate_Update interface {
	isMetricsUpdate_Update()
}

type MetricsUpdate_NodeMetrics struct {
	NodeMetrics *NodeMetricsUpdate `protobuf:"bytes,2,opt,name=node_metrics,json=nodeMetrics,proto3,oneof"`
}

type MetricsUpdate_EdgeMetrics struct {
	EdgeMetrics *EdgeMetricsUpdate `protobuf:"bytes,3,opt,name=edge_metrics,json=edgeMetrics,proto3,oneof"`
}

func (*MetricsUpdate_NodeMetrics) isMetricsUpdate_Update() {}

func (*MetricsUpdate_EdgeMetrics) isMetricsUpdate_Update() {}

type NodeMetricsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Updated health metrics
	Metrics *HealthMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *NodeMetricsUpdate) Reset() {
	*x = NodeMetricsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetricsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetricsUpdate) ProtoMessage() {}

func (x *NodeMetricsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetricsUpdate.ProtoReflect.Descriptor instead.
func (*NodeMetricsUpdate) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{25}
}

func (x *NodeMetricsUpdate) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeMetricsUpdate) GetMetrics() *HealthMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type EdgeMetricsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the edge
	EdgeId string `protobuf:"bytes,1,opt,name=edge_id,json=edgeId,proto3" json:"edge_id,omitempty"`
	// Updated connection metrics
	Metrics *ConnectionMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *EdgeMetricsUpdate) Reset() {
	*x = EdgeMetricsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_topology_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeMetricsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMetricsUpdate) ProtoMessage() {}

func (x *EdgeMetricsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_topology_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMetricsUpdate.ProtoReflect.Descriptor instead.
func (*EdgeMetricsUpdate) Descriptor() ([]byte, []int) {
	return file_audit_v1_topology_service_proto_rawDescGZIP(), []int{26}
}

func (x *EdgeMetricsUpdate) GetEdgeId() string {
	if x != nil {
		return x.EdgeId
	}
	return ""
}

func (x *EdgeMetricsUpdate) GetMetrics() *ConnectionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_audit_v1_topology_service_proto protoreflect.FileDescriptor

var file_audit_v1_topology_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x9a, 0x02, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc4, 0x02, 0x0a,
	0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x15, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x15,
	0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x10, 0x22, 0xda, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x53, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb,
	0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x89, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10, 0x22,
	0xda, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x53, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0c,
	0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x35, 0x30, 0x5f,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x35, 0x30, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x39, 0x39, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x39, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x52, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf7, 0x03, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x36, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x09, 0x45, 0x64,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x65, 0x64,
	0x67, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xd7, 0x01, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x63, 0x0a, 0x11, 0x45, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2a, 0x6f, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x73, 0x0a,
	0x0a, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x44,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x2a, 0xbd, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x32, 0xdc, 0x03, 0x0a, 0x0f, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x30, 0x01, 0x12, 0x58,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_v1_topology_service_proto_rawDescOnce sync.Once
	file_audit_v1_topology_service_proto_rawDescData = file_audit_v1_topology_service_proto_rawDesc
)

func file_audit_v1_topology_service_proto_rawDescGZIP() []byte {
	file_audit_v1_topology_service_proto_rawDescOnce.Do(func() {
		file_audit_v1_topology_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_v1_topology_service_proto_rawDescData)
	})
	return file_audit_v1_topology_service_proto_rawDescData
}

var file_audit_v1_topology_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_audit_v1_topology_service_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_audit_v1_topology_service_proto_goTypes = []interface{}{
	(NodeStatus)(0),                      // 0: audit.v1.NodeStatus
	(EdgeStatus)(0),                      // 1: audit.v1.EdgeStatus
	(ConnectionType)(0),                  // 2: audit.v1.ConnectionType
	(MetadataSection)(0),                 // 3: audit.v1.MetadataSection
	(*GetTopologyStructureRequest)(nil),  // 4: audit.v1.GetTopologyStructureRequest
	(*TopologyStructureResponse)(nil),    // 5: audit.v1.TopologyStructureResponse
	(*NodeSummary)(nil),                  // 6: audit.v1.NodeSummary
	(*EdgeSummary)(nil),                  // 7: audit.v1.EdgeSummary
	(*GetNodeMetadataRequest)(nil),       // 8: audit.v1.GetNodeMetadataRequest
	(*GetNodeMetadataResponse)(nil),      // 9: audit.v1.GetNodeMetadataResponse
	(*NodeMetadata)(nil),                 // 10: audit.v1.NodeMetadata
	(*BasicInfo)(nil),                    // 11: audit.v1.BasicInfo
	(*HealthMetrics)(nil),                // 12: audit.v1.HealthMetrics
	(*EndpointInfo)(nil),                 // 13: audit.v1.EndpointInfo
	(*GetEdgeMetadataRequest)(nil),       // 14: audit.v1.GetEdgeMetadataRequest
	(*GetEdgeMetadataResponse)(nil),      // 15: audit.v1.GetEdgeMetadataResponse
	(*EdgeMetadata)(nil),                 // 16: audit.v1.EdgeMetadata
	(*ConnectionMetrics)(nil),            // 17: audit.v1.ConnectionMetrics
	(*ConnectionDetails)(nil),            // 18: audit.v1.ConnectionDetails
	(*StreamTopologyChangesRequest)(nil), // 19: audit.v1.StreamTopologyChangesRequest
	(*TopologyChange)(nil),               // 20: audit.v1.TopologyChange
	(*NodeAdded)(nil),                    // 21: audit.v1.NodeAdded
	(*NodeRemoved)(nil),                  // 22: audit.v1.NodeRemoved
	(*NodeStatusChanged)(nil),            // 23: audit.v1.NodeStatusChanged
	(*EdgeAdded)(nil),                    // 24: audit.v1.EdgeAdded
	(*EdgeRemoved)(nil),                  // 25: audit.v1.EdgeRemoved
	(*EdgeStatusChanged)(nil),            // 26: audit.v1.EdgeStatusChanged
	(*StreamMetricsUpdatesRequest)(nil),  // 27: audit.v1.StreamMetricsUpdatesRequest
	(*MetricsUpdate)(nil),                // 28: audit.v1.MetricsUpdate
	(*NodeMetricsUpdate)(nil),            // 29: audit.v1.NodeMetricsUpdate
	(*EdgeMetricsUpdate)(nil),            // 30: audit.v1.EdgeMetricsUpdate
	nil,                                  // 31: audit.v1.NodeSummary.LabelsEntry
	nil,                                  // 32: audit.v1.GetNodeMetadataResponse.MetadataEntry
	nil,                                  // 33: audit.v1.NodeMetadata.ConfigurationEntry
	nil,                                  // 34: audit.v1.GetEdgeMetadataResponse.MetadataEntry
	(*timestamppb.Timestamp)(nil),        // 35: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),          // 36: google.protobuf.Duration
}
var file_audit_v1_topology_service_proto_depIdxs = []int32{
	0,  // 0: audit.v1.GetTopologyStructureRequest.statuses:type_name -> audit.v1.NodeStatus
	6,  // 1: audit.v1.TopologyStructureResponse.nodes:type_name -> audit.v1.NodeSummary
	7,  // 2: audit.v1.TopologyStructureResponse.edges:type_name -> audit.v1.EdgeSummary
	35, // 3: audit.v1.TopologyStructureResponse.snapshot_time:type_name -> google.protobuf.Timestamp
	0,  // 4: audit.v1.NodeSummary.status:type_name -> audit.v1.NodeStatus
	31, // 5: audit.v1.NodeSummary.labels:type_name -> audit.v1.NodeSummary.LabelsEntry
	2,  // 6: audit.v1.EdgeSummary.type:type_name -> audit.v1.ConnectionType
	1,  // 7: audit.v1.EdgeSummary.status:type_name -> audit.v1.EdgeStatus
	3,  // 8: audit.v1.GetNodeMetadataRequest.metadata_sections:type_name -> audit.v1.MetadataSection
	32, // 9: audit.v1.GetNodeMetadataResponse.metadata:type_name -> audit.v1.GetNodeMetadataResponse.MetadataEntry
	11, // 10: audit.v1.NodeMetadata.basic_info:type_name -> audit.v1.BasicInfo
	12, // 11: audit.v1.NodeMetadata.health_metrics:type_name -> audit.v1.HealthMetrics
	13, // 12: audit.v1.NodeMetadata.endpoints:type_name -> audit.v1.EndpointInfo
	33, // 13: audit.v1.NodeMetadata.configuration:type_name -> audit.v1.NodeMetadata.ConfigurationEntry
	35, // 14: audit.v1.BasicInfo.started_at:type_name -> google.protobuf.Timestamp
	35, // 15: audit.v1.BasicInfo.last_seen:type_name -> google.protobuf.Timestamp
	35, // 16: audit.v1.HealthMetrics.measured_at:type_name -> google.protobuf.Timestamp
	3,  // 17: audit.v1.GetEdgeMetadataRequest.metadata_sections:type_name -> audit.v1.MetadataSection
	34, // 18: audit.v1.GetEdgeMetadataResponse.metadata:type_name -> audit.v1.GetEdgeMetadataResponse.MetadataEntry
	17, // 19: audit.v1.EdgeMetadata.metrics:type_name -> audit.v1.ConnectionMetrics
	18, // 20: audit.v1.EdgeMetadata.details:type_name -> audit.v1.ConnectionDetails
	35, // 21: audit.v1.ConnectionMetrics.measured_at:type_name -> google.protobuf.Timestamp
	35, // 22: audit.v1.ConnectionDetails.established_at:type_name -> google.protobuf.Timestamp
	35, // 23: audit.v1.TopologyChange.timestamp:type_name -> google.protobuf.Timestamp
	21, // 24: audit.v1.TopologyChange.node_added:type_name -> audit.v1.NodeAdded
	22, // 25: audit.v1.TopologyChange.node_removed:type_name -> audit.v1.NodeRemoved
	23, // 26: audit.v1.TopologyChange.node_status_changed:type_name -> audit.v1.NodeStatusChanged
	24, // 27: audit.v1.TopologyChange.edge_added:type_name -> audit.v1.EdgeAdded
	25, // 28: audit.v1.TopologyChange.edge_removed:type_name -> audit.v1.EdgeRemoved
	26, // 29: audit.v1.TopologyChange.edge_status_changed:type_name -> audit.v1.EdgeStatusChanged
	6,  // 30: audit.v1.NodeAdded.node:type_name -> audit.v1.NodeSummary
	0,  // 31: audit.v1.NodeStatusChanged.old_status:type_name -> audit.v1.NodeStatus
	0,  // 32: audit.v1.NodeStatusChanged.new_status:type_name -> audit.v1.NodeStatus
	7,  // 33: audit.v1.EdgeAdded.edge:type_name -> audit.v1.EdgeSummary
	1,  // 34: audit.v1.EdgeStatusChanged.old_status:type_name -> audit.v1.EdgeStatus
	1,  // 35: audit.v1.EdgeStatusChanged.new_status:type_name -> audit.v1.EdgeStatus
	36, // 36: audit.v1.StreamMetricsUpdatesRequest.update_interval:type_name -> google.protobuf.Duration
	35, // 37: audit.v1.MetricsUpdate.timestamp:type_name -> google.protobuf.Timestamp
	29, // 38: audit.v1.MetricsUpdate.node_metrics:type_name -> audit.v1.NodeMetricsUpdate
	30, // 39: audit.v1.MetricsUpdate.edge_metrics:type_name -> audit.v1.EdgeMetricsUpdate
	12, // 40: audit.v1.NodeMetricsUpdate.metrics:type_name -> audit.v1.HealthMetrics
	17, // 41: audit.v1.EdgeMetricsUpdate.metrics:type_name -> audit.v1.ConnectionMetrics
	10, // 42: audit.v1.GetNodeMetadataResponse.MetadataEntry.value:type_name -> audit.v1.NodeMetadata
	16, // 43: audit.v1.GetEdgeMetadataResponse.MetadataEntry.value:type_name -> audit.v1.EdgeMetadata
	4,  // 44: audit.v1.TopologyService.GetTopologyStructure:input_type -> audit.v1.GetTopologyStructureRequest
	8,  // 45: audit.v1.TopologyService.GetNodeMetadata:input_type -> audit.v1.GetNodeMetadataRequest
	14, // 46: audit.v1.TopologyService.GetEdgeMetadata:input_type -> audit.v1.GetEdgeMetadataRequest
	19, // 47: audit.v1.TopologyService.StreamTopologyChanges:input_type -> audit.v1.StreamTopologyChangesRequest
	27, // 48: audit.v1.TopologyService.StreamMetricsUpdates:input_type -> audit.v1.StreamMetricsUpdatesRequest
	5,  // 49: audit.v1.TopologyService.GetTopologyStructure:output_type -> audit.v1.TopologyStructureResponse
	9,  // 50: audit.v1.TopologyService.GetNodeMetadata:output_type -> audit.v1.GetNodeMetadataResponse
	15, // 51: audit.v1.TopologyService.GetEdgeMetadata:output_type -> audit.v1.GetEdgeMetadataResponse
	20, // 52: audit.v1.TopologyService.StreamTopologyChanges:output_type -> audit.v1.TopologyChange
	28, // 53: audit.v1.TopologyService.StreamMetricsUpdates:output_type -> audit.v1.MetricsUpdate
	49, // [49:54] is the sub-list for method output_type
	44, // [44:49] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_audit_v1_topology_service_proto_init() }
func file_audit_v1_topology_service_proto_init() {
	if File_audit_v1_topology_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audit_v1_topology_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyStructureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyStructureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgeMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgeMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTopologyChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeStatusChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetricsUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetricsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_v1_topology_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeMetricsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_audit_v1_topology_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*TopologyChange_NodeAdded)(nil),
		(*TopologyChange_NodeRemoved)(nil),
		(*TopologyChange_NodeStatusChanged)(nil),
		(*TopologyChange_EdgeAdded)(nil),
		(*TopologyChange_EdgeRemoved)(nil),
		(*TopologyChange_EdgeStatusChanged)(nil),
	}
	file_audit_v1_topology_service_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*MetricsUpdate_NodeMetrics)(nil),
		(*MetricsUpdate_EdgeMetrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_v1_topology_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_v1_topology_service_proto_goTypes,
		DependencyIndexes: file_audit_v1_topology_service_proto_depIdxs,
		EnumInfos:         file_audit_v1_topology_service_proto_enumTypes,
		MessageInfos:      file_audit_v1_topology_service_proto_msgTypes,
	}.Build()
	File_audit_v1_topology_service_proto = out.File
	file_audit_v1_topology_service_proto_rawDesc = nil
	file_audit_v1_topology_service_proto_goTypes = nil
	file_audit_v1_topology_service_proto_depIdxs = nil
}

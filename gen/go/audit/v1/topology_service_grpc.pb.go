// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: audit/v1/topology_service.proto

package auditv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopologyServiceClient is the client API for TopologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyServiceClient interface {
	// GetTopologyStructure returns lightweight topology structure for initial render.
	// Returns node and edge summaries with status, suitable for D3.js force-directed graph.
	GetTopologyStructure(ctx context.Context, in *GetTopologyStructureRequest, opts ...grpc.CallOption) (*TopologyStructureResponse, error)
	// GetNodeMetadata returns detailed metadata for specific nodes.
	// Empty node_ids returns metadata for all nodes.
	// Supports configurable fields to fetch only required data.
	GetNodeMetadata(ctx context.Context, in *GetNodeMetadataRequest, opts ...grpc.CallOption) (*GetNodeMetadataResponse, error)
	// GetEdgeMetadata returns detailed metadata for specific edges.
	// Supports batch fetching for multiple edges.
	GetEdgeMetadata(ctx context.Context, in *GetEdgeMetadataRequest, opts ...grpc.CallOption) (*GetEdgeMetadataResponse, error)
	// StreamTopologyChanges streams structural topology changes (add/remove/status).
	// Returns incremental changes, not full topology snapshots.
	StreamTopologyChanges(ctx context.Context, in *StreamTopologyChangesRequest, opts ...grpc.CallOption) (TopologyService_StreamTopologyChangesClient, error)
	// StreamMetricsUpdates streams high-frequency metrics updates.
	// Minimum update interval is 1 second (enforced server-side).
	// Empty node_ids/edge_ids subscribes to all elements.
	StreamMetricsUpdates(ctx context.Context, in *StreamMetricsUpdatesRequest, opts ...grpc.CallOption) (TopologyService_StreamMetricsUpdatesClient, error)
}

type topologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyServiceClient(cc grpc.ClientConnInterface) TopologyServiceClient {
	return &topologyServiceClient{cc}
}

func (c *topologyServiceClient) GetTopologyStructure(ctx context.Context, in *GetTopologyStructureRequest, opts ...grpc.CallOption) (*TopologyStructureResponse, error) {
	out := new(TopologyStructureResponse)
	err := c.cc.Invoke(ctx, "/audit.v1.TopologyService/GetTopologyStructure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyServiceClient) GetNodeMetadata(ctx context.Context, in *GetNodeMetadataRequest, opts ...grpc.CallOption) (*GetNodeMetadataResponse, error) {
	out := new(GetNodeMetadataResponse)
	err := c.cc.Invoke(ctx, "/audit.v1.TopologyService/GetNodeMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyServiceClient) GetEdgeMetadata(ctx context.Context, in *GetEdgeMetadataRequest, opts ...grpc.CallOption) (*GetEdgeMetadataResponse, error) {
	out := new(GetEdgeMetadataResponse)
	err := c.cc.Invoke(ctx, "/audit.v1.TopologyService/GetEdgeMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyServiceClient) StreamTopologyChanges(ctx context.Context, in *StreamTopologyChangesRequest, opts ...grpc.CallOption) (TopologyService_StreamTopologyChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TopologyService_ServiceDesc.Streams[0], "/audit.v1.TopologyService/StreamTopologyChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceStreamTopologyChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_StreamTopologyChangesClient interface {
	Recv() (*TopologyChange, error)
	grpc.ClientStream
}

type topologyServiceStreamTopologyChangesClient struct {
	grpc.ClientStream
}

func (x *topologyServiceStreamTopologyChangesClient) Recv() (*TopologyChange, error) {
	m := new(TopologyChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topologyServiceClient) StreamMetricsUpdates(ctx context.Context, in *StreamMetricsUpdatesRequest, opts ...grpc.CallOption) (TopologyService_StreamMetricsUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TopologyService_ServiceDesc.Streams[1], "/audit.v1.TopologyService/StreamMetricsUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceStreamMetricsUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_StreamMetricsUpdatesClient interface {
	Recv() (*MetricsUpdate, error)
	grpc.ClientStream
}

type topologyServiceStreamMetricsUpdatesClient struct {
	grpc.ClientStream
}

func (x *topologyServiceStreamMetricsUpdatesClient) Recv() (*MetricsUpdate, error) {
	m := new(MetricsUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopologyServiceServer is the server API for TopologyService service.
// All implementations should embed UnimplementedTopologyServiceServer
// for forward compatibility
type TopologyServiceServer interface {
	// GetTopologyStructure returns lightweight topology structure for initial render.
	// Returns node and edge summaries with status, suitable for D3.js force-directed graph.
	GetTopologyStructure(context.Context, *GetTopologyStructureRequest) (*TopologyStructureResponse, error)
	// GetNodeMetadata returns detailed metadata for specific nodes.
	// Empty node_ids returns metadata for all nodes.
	// Supports configurable fields to fetch only required data.
	GetNodeMetadata(context.Context, *GetNodeMetadataRequest) (*GetNodeMetadataResponse, error)
	// GetEdgeMetadata returns detailed metadata for specific edges.
	// Supports batch fetching for multiple edges.
	GetEdgeMetadata(context.Context, *GetEdgeMetadataRequest) (*GetEdgeMetadataResponse, error)
	// StreamTopologyChanges streams structural topology changes (add/remove/status).
	// Returns incremental changes, not full topology snapshots.
	StreamTopologyChanges(*StreamTopologyChangesRequest, TopologyService_StreamTopologyChangesServer) error
	// StreamMetricsUpdates streams high-frequency metrics updates.
	// Minimum update interval is 1 second (enforced server-side).
	// Empty node_ids/edge_ids subscribes to all elements.
	StreamMetricsUpdates(*StreamMetricsUpdatesRequest, TopologyService_StreamMetricsUpdatesServer) error
}

// UnimplementedTopologyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTopologyServiceServer struct {
}

func (UnimplementedTopologyServiceServer) GetTopologyStructure(context.Context, *GetTopologyStructureRequest) (*TopologyStructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyStructure not implemented")
}
func (UnimplementedTopologyServiceServer) GetNodeMetadata(context.Context, *GetNodeMetadataRequest) (*GetNodeMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetadata not implemented")
}
func (UnimplementedTopologyServiceServer) GetEdgeMetadata(context.Context, *GetEdgeMetadataRequest) (*GetEdgeMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdgeMetadata not implemented")
}
func (UnimplementedTopologyServiceServer) StreamTopologyChanges(*StreamTopologyChangesRequest, TopologyService_StreamTopologyChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTopologyChanges not implemented")
}
func (UnimplementedTopologyServiceServer) StreamMetricsUpdates(*StreamMetricsUpdatesRequest, TopologyService_StreamMetricsUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMetricsUpdates not implemented")
}

// UnsafeTopologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyServiceServer will
// result in compilation errors.
type UnsafeTopologyServiceServer interface {
	mustEmbedUnimplementedTopologyServiceServer()
}

func RegisterTopologyServiceServer(s grpc.ServiceRegistrar, srv TopologyServiceServer) {
	s.RegisterService(&TopologyService_ServiceDesc, srv)
}

func _TopologyService_GetTopologyStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyStructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyServiceServer).GetTopologyStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.v1.TopologyService/GetTopologyStructure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyServiceServer).GetTopologyStructure(ctx, req.(*GetTopologyStructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyService_GetNodeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyServiceServer).GetNodeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.v1.TopologyService/GetNodeMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyServiceServer).GetNodeMetadata(ctx, req.(*GetNodeMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyService_GetEdgeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgeMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyServiceServer).GetEdgeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.v1.TopologyService/GetEdgeMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyServiceServer).GetEdgeMetadata(ctx, req.(*GetEdgeMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyService_StreamTopologyChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTopologyChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).StreamTopologyChanges(m, &topologyServiceStreamTopologyChangesServer{stream})
}

type TopologyService_StreamTopologyChangesServer interface {
	Send(*TopologyChange) error
	grpc.ServerStream
}

type topologyServiceStreamTopologyChangesServer struct {
	grpc.ServerStream
}

func (x *topologyServiceStreamTopologyChangesServer) Send(m *TopologyChange) error {
	return x.ServerStream.SendMsg(m)
}

func _TopologyService_StreamMetricsUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMetricsUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).StreamMetricsUpdates(m, &topologyServiceStreamMetricsUpdatesServer{stream})
}

type TopologyService_StreamMetricsUpdatesServer interface {
	Send(*MetricsUpdate) error
	grpc.ServerStream
}

type topologyServiceStreamMetricsUpdatesServer struct {
	grpc.ServerStream
}

func (x *topologyServiceStreamMetricsUpdatesServer) Send(m *MetricsUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// TopologyService_ServiceDesc is the grpc.ServiceDesc for TopologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audit.v1.TopologyService",
	HandlerType: (*TopologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopologyStructure",
			Handler:    _TopologyService_GetTopologyStructure_Handler,
		},
		{
			MethodName: "GetNodeMetadata",
			Handler:    _TopologyService_GetNodeMetadata_Handler,
		},
		{
			MethodName: "GetEdgeMetadata",
			Handler:    _TopologyService_GetEdgeMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTopologyChanges",
			Handler:       _TopologyService_StreamTopologyChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMetricsUpdates",
			Handler:       _TopologyService_StreamMetricsUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "audit/v1/topology_service.proto",
}

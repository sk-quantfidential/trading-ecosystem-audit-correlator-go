// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: audit/v1/topology_service.proto

package auditv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/quantfidential/trading-ecosystem/audit-correlator-go/gen/go/audit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TopologyServiceName is the fully-qualified name of the TopologyService service.
	TopologyServiceName = "audit.v1.TopologyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TopologyServiceGetTopologyStructureProcedure is the fully-qualified name of the TopologyService's
	// GetTopologyStructure RPC.
	TopologyServiceGetTopologyStructureProcedure = "/audit.v1.TopologyService/GetTopologyStructure"
	// TopologyServiceGetNodeMetadataProcedure is the fully-qualified name of the TopologyService's
	// GetNodeMetadata RPC.
	TopologyServiceGetNodeMetadataProcedure = "/audit.v1.TopologyService/GetNodeMetadata"
	// TopologyServiceGetEdgeMetadataProcedure is the fully-qualified name of the TopologyService's
	// GetEdgeMetadata RPC.
	TopologyServiceGetEdgeMetadataProcedure = "/audit.v1.TopologyService/GetEdgeMetadata"
	// TopologyServiceStreamTopologyChangesProcedure is the fully-qualified name of the
	// TopologyService's StreamTopologyChanges RPC.
	TopologyServiceStreamTopologyChangesProcedure = "/audit.v1.TopologyService/StreamTopologyChanges"
	// TopologyServiceStreamMetricsUpdatesProcedure is the fully-qualified name of the TopologyService's
	// StreamMetricsUpdates RPC.
	TopologyServiceStreamMetricsUpdatesProcedure = "/audit.v1.TopologyService/StreamMetricsUpdates"
)

// TopologyServiceClient is a client for the audit.v1.TopologyService service.
type TopologyServiceClient interface {
	// GetTopologyStructure returns lightweight topology structure for initial render.
	// Returns node and edge summaries with status, suitable for D3.js force-directed graph.
	GetTopologyStructure(context.Context, *connect.Request[v1.GetTopologyStructureRequest]) (*connect.Response[v1.TopologyStructureResponse], error)
	// GetNodeMetadata returns detailed metadata for specific nodes.
	// Empty node_ids returns metadata for all nodes.
	// Supports configurable fields to fetch only required data.
	GetNodeMetadata(context.Context, *connect.Request[v1.GetNodeMetadataRequest]) (*connect.Response[v1.GetNodeMetadataResponse], error)
	// GetEdgeMetadata returns detailed metadata for specific edges.
	// Supports batch fetching for multiple edges.
	GetEdgeMetadata(context.Context, *connect.Request[v1.GetEdgeMetadataRequest]) (*connect.Response[v1.GetEdgeMetadataResponse], error)
	// StreamTopologyChanges streams structural topology changes (add/remove/status).
	// Returns incremental changes, not full topology snapshots.
	StreamTopologyChanges(context.Context, *connect.Request[v1.StreamTopologyChangesRequest]) (*connect.ServerStreamForClient[v1.TopologyChange], error)
	// StreamMetricsUpdates streams high-frequency metrics updates.
	// Minimum update interval is 1 second (enforced server-side).
	// Empty node_ids/edge_ids subscribes to all elements.
	StreamMetricsUpdates(context.Context, *connect.Request[v1.StreamMetricsUpdatesRequest]) (*connect.ServerStreamForClient[v1.MetricsUpdate], error)
}

// NewTopologyServiceClient constructs a client for the audit.v1.TopologyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTopologyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TopologyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	topologyServiceMethods := v1.File_audit_v1_topology_service_proto.Services().ByName("TopologyService").Methods()
	return &topologyServiceClient{
		getTopologyStructure: connect.NewClient[v1.GetTopologyStructureRequest, v1.TopologyStructureResponse](
			httpClient,
			baseURL+TopologyServiceGetTopologyStructureProcedure,
			connect.WithSchema(topologyServiceMethods.ByName("GetTopologyStructure")),
			connect.WithClientOptions(opts...),
		),
		getNodeMetadata: connect.NewClient[v1.GetNodeMetadataRequest, v1.GetNodeMetadataResponse](
			httpClient,
			baseURL+TopologyServiceGetNodeMetadataProcedure,
			connect.WithSchema(topologyServiceMethods.ByName("GetNodeMetadata")),
			connect.WithClientOptions(opts...),
		),
		getEdgeMetadata: connect.NewClient[v1.GetEdgeMetadataRequest, v1.GetEdgeMetadataResponse](
			httpClient,
			baseURL+TopologyServiceGetEdgeMetadataProcedure,
			connect.WithSchema(topologyServiceMethods.ByName("GetEdgeMetadata")),
			connect.WithClientOptions(opts...),
		),
		streamTopologyChanges: connect.NewClient[v1.StreamTopologyChangesRequest, v1.TopologyChange](
			httpClient,
			baseURL+TopologyServiceStreamTopologyChangesProcedure,
			connect.WithSchema(topologyServiceMethods.ByName("StreamTopologyChanges")),
			connect.WithClientOptions(opts...),
		),
		streamMetricsUpdates: connect.NewClient[v1.StreamMetricsUpdatesRequest, v1.MetricsUpdate](
			httpClient,
			baseURL+TopologyServiceStreamMetricsUpdatesProcedure,
			connect.WithSchema(topologyServiceMethods.ByName("StreamMetricsUpdates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// topologyServiceClient implements TopologyServiceClient.
type topologyServiceClient struct {
	getTopologyStructure  *connect.Client[v1.GetTopologyStructureRequest, v1.TopologyStructureResponse]
	getNodeMetadata       *connect.Client[v1.GetNodeMetadataRequest, v1.GetNodeMetadataResponse]
	getEdgeMetadata       *connect.Client[v1.GetEdgeMetadataRequest, v1.GetEdgeMetadataResponse]
	streamTopologyChanges *connect.Client[v1.StreamTopologyChangesRequest, v1.TopologyChange]
	streamMetricsUpdates  *connect.Client[v1.StreamMetricsUpdatesRequest, v1.MetricsUpdate]
}

// GetTopologyStructure calls audit.v1.TopologyService.GetTopologyStructure.
func (c *topologyServiceClient) GetTopologyStructure(ctx context.Context, req *connect.Request[v1.GetTopologyStructureRequest]) (*connect.Response[v1.TopologyStructureResponse], error) {
	return c.getTopologyStructure.CallUnary(ctx, req)
}

// GetNodeMetadata calls audit.v1.TopologyService.GetNodeMetadata.
func (c *topologyServiceClient) GetNodeMetadata(ctx context.Context, req *connect.Request[v1.GetNodeMetadataRequest]) (*connect.Response[v1.GetNodeMetadataResponse], error) {
	return c.getNodeMetadata.CallUnary(ctx, req)
}

// GetEdgeMetadata calls audit.v1.TopologyService.GetEdgeMetadata.
func (c *topologyServiceClient) GetEdgeMetadata(ctx context.Context, req *connect.Request[v1.GetEdgeMetadataRequest]) (*connect.Response[v1.GetEdgeMetadataResponse], error) {
	return c.getEdgeMetadata.CallUnary(ctx, req)
}

// StreamTopologyChanges calls audit.v1.TopologyService.StreamTopologyChanges.
func (c *topologyServiceClient) StreamTopologyChanges(ctx context.Context, req *connect.Request[v1.StreamTopologyChangesRequest]) (*connect.ServerStreamForClient[v1.TopologyChange], error) {
	return c.streamTopologyChanges.CallServerStream(ctx, req)
}

// StreamMetricsUpdates calls audit.v1.TopologyService.StreamMetricsUpdates.
func (c *topologyServiceClient) StreamMetricsUpdates(ctx context.Context, req *connect.Request[v1.StreamMetricsUpdatesRequest]) (*connect.ServerStreamForClient[v1.MetricsUpdate], error) {
	return c.streamMetricsUpdates.CallServerStream(ctx, req)
}

// TopologyServiceHandler is an implementation of the audit.v1.TopologyService service.
type TopologyServiceHandler interface {
	// GetTopologyStructure returns lightweight topology structure for initial render.
	// Returns node and edge summaries with status, suitable for D3.js force-directed graph.
	GetTopologyStructure(context.Context, *connect.Request[v1.GetTopologyStructureRequest]) (*connect.Response[v1.TopologyStructureResponse], error)
	// GetNodeMetadata returns detailed metadata for specific nodes.
	// Empty node_ids returns metadata for all nodes.
	// Supports configurable fields to fetch only required data.
	GetNodeMetadata(context.Context, *connect.Request[v1.GetNodeMetadataRequest]) (*connect.Response[v1.GetNodeMetadataResponse], error)
	// GetEdgeMetadata returns detailed metadata for specific edges.
	// Supports batch fetching for multiple edges.
	GetEdgeMetadata(context.Context, *connect.Request[v1.GetEdgeMetadataRequest]) (*connect.Response[v1.GetEdgeMetadataResponse], error)
	// StreamTopologyChanges streams structural topology changes (add/remove/status).
	// Returns incremental changes, not full topology snapshots.
	StreamTopologyChanges(context.Context, *connect.Request[v1.StreamTopologyChangesRequest], *connect.ServerStream[v1.TopologyChange]) error
	// StreamMetricsUpdates streams high-frequency metrics updates.
	// Minimum update interval is 1 second (enforced server-side).
	// Empty node_ids/edge_ids subscribes to all elements.
	StreamMetricsUpdates(context.Context, *connect.Request[v1.StreamMetricsUpdatesRequest], *connect.ServerStream[v1.MetricsUpdate]) error
}

// NewTopologyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTopologyServiceHandler(svc TopologyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	topologyServiceMethods := v1.File_audit_v1_topology_service_proto.Services().ByName("TopologyService").Methods()
	topologyServiceGetTopologyStructureHandler := connect.NewUnaryHandler(
		TopologyServiceGetTopologyStructureProcedure,
		svc.GetTopologyStructure,
		connect.WithSchema(topologyServiceMethods.ByName("GetTopologyStructure")),
		connect.WithHandlerOptions(opts...),
	)
	topologyServiceGetNodeMetadataHandler := connect.NewUnaryHandler(
		TopologyServiceGetNodeMetadataProcedure,
		svc.GetNodeMetadata,
		connect.WithSchema(topologyServiceMethods.ByName("GetNodeMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	topologyServiceGetEdgeMetadataHandler := connect.NewUnaryHandler(
		TopologyServiceGetEdgeMetadataProcedure,
		svc.GetEdgeMetadata,
		connect.WithSchema(topologyServiceMethods.ByName("GetEdgeMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	topologyServiceStreamTopologyChangesHandler := connect.NewServerStreamHandler(
		TopologyServiceStreamTopologyChangesProcedure,
		svc.StreamTopologyChanges,
		connect.WithSchema(topologyServiceMethods.ByName("StreamTopologyChanges")),
		connect.WithHandlerOptions(opts...),
	)
	topologyServiceStreamMetricsUpdatesHandler := connect.NewServerStreamHandler(
		TopologyServiceStreamMetricsUpdatesProcedure,
		svc.StreamMetricsUpdates,
		connect.WithSchema(topologyServiceMethods.ByName("StreamMetricsUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/audit.v1.TopologyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TopologyServiceGetTopologyStructureProcedure:
			topologyServiceGetTopologyStructureHandler.ServeHTTP(w, r)
		case TopologyServiceGetNodeMetadataProcedure:
			topologyServiceGetNodeMetadataHandler.ServeHTTP(w, r)
		case TopologyServiceGetEdgeMetadataProcedure:
			topologyServiceGetEdgeMetadataHandler.ServeHTTP(w, r)
		case TopologyServiceStreamTopologyChangesProcedure:
			topologyServiceStreamTopologyChangesHandler.ServeHTTP(w, r)
		case TopologyServiceStreamMetricsUpdatesProcedure:
			topologyServiceStreamMetricsUpdatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTopologyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTopologyServiceHandler struct{}

func (UnimplementedTopologyServiceHandler) GetTopologyStructure(context.Context, *connect.Request[v1.GetTopologyStructureRequest]) (*connect.Response[v1.TopologyStructureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("audit.v1.TopologyService.GetTopologyStructure is not implemented"))
}

func (UnimplementedTopologyServiceHandler) GetNodeMetadata(context.Context, *connect.Request[v1.GetNodeMetadataRequest]) (*connect.Response[v1.GetNodeMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("audit.v1.TopologyService.GetNodeMetadata is not implemented"))
}

func (UnimplementedTopologyServiceHandler) GetEdgeMetadata(context.Context, *connect.Request[v1.GetEdgeMetadataRequest]) (*connect.Response[v1.GetEdgeMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("audit.v1.TopologyService.GetEdgeMetadata is not implemented"))
}

func (UnimplementedTopologyServiceHandler) StreamTopologyChanges(context.Context, *connect.Request[v1.StreamTopologyChangesRequest], *connect.ServerStream[v1.TopologyChange]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("audit.v1.TopologyService.StreamTopologyChanges is not implemented"))
}

func (UnimplementedTopologyServiceHandler) StreamMetricsUpdates(context.Context, *connect.Request[v1.StreamMetricsUpdatesRequest], *connect.ServerStream[v1.MetricsUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("audit.v1.TopologyService.StreamMetricsUpdates is not implemented"))
}
